N, S, F = map(int, input().split())
S -= 1
F -= 1

# '''Cловарь '''
# def add_edge(G, v_s,v_f, _weight):
#     if v_s not in G:
#         G[v_s] = {}
#     G[v_s][v_f] = weight
#
#
# for v_s in range(N):
#     spisok = list(map(int, input().split()))
#     for v_f in range(len(spisok)):
#         if v_f  == v_s or spisok[v_f] < 0:
#             continue
#         weight = spisok[v_f]
#         add_edge(G,v_s,v_f, weight)

'''Матрицы смежности'''
matrix_vz = [[0]] * N
for v_s in range(N):
    spisok = list(map(int, input().split()))
    matrix_vz[v_s] = spisok

# print(*matrix_vz, sep='\n')
from collections import  deque



def dekstra(G, start):
    Q = deque()
    s = {}
    s[start] = 0
    Q.append(start)
    while Q:
        v = Q.popleft()
        for u in range(len(G[v])):
            if u != v and G[v][u] > 0:
                if u not in s or s[v] + G[v][u] < s[u]:
                    s[u] = s[v] + G[v][u]
                    Q.append(u)

    return s

# print(dekstra(matrix_vz, S))
# if F in dekstra(matrix_vz, S):
#     print(dekstra(matrix_vz, S)[F])
# else:
#     print(-1)



def doroga(G, start, end, S):
    Q = []
    v_end = end
    Q.append(v_end)
    while v_end != start:
        for v_start in range(len(G[v_end])):
            if (S[v_end] == S[v_start] + G[v_start][v_end]) and (v_start != v_end):
                Q = [v_start] + Q
                v_end = v_start
                print(Q)
                break
    return Q

print(doroga(matrix_vz, S, F, dekstra(matrix_vz,S)))
